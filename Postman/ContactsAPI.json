{
	"info": {
		"_postman_id": "ad319e9b-90c1-421c-98d4-f27635084a7c",
		"name": "ContactsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24104829"
	},
	"item": [
		{
			"name": "Clients",
			"item": [
				{
					"name": "Добавление нового клиента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.name).to.not.be.null;\r",
									"    pm.expect(target.name).equal('Григорий', 'Имя клиента должно быть Григорий');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Григорий\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление второго клиента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.name).to.not.be.null;\r",
									"    pm.expect(target.name).equal('Игорь', 'Имя клиента должно быть Игорь');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Игорь\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление клиента с некорректными параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ООООООООООЧЧЧЧЧЧЧЕЕЕЕЕЕЕЕЕЕЕЕННННННЬЬЬЬЬЬЬЬЬ ДЛИИИИИИИИИИИИИИИННННННННОООООЕЕЕЕЕ ИИИИИИИИИИИММММММЯЯЯЯЯЯЯЯЯЯЯЯЯЯЯ\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение клиента по идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).equal(1);\r",
									"    pm.expect(target.name).equal('Григорий');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								""
							],
							"variable": [
								{
									"key": "clientId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение клиента по несуществующему идентификатору",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								""
							],
							"variable": [
								{
									"key": "clientId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить всех клиентов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать 2 клиента\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.length, 'client count in total').to.eql(2);\r",
									"\r",
									"    pm.expect(jsonData[0].id, 'result[0]: \"id\" field').to.eql(1);\r",
									"    \r",
									"    pm.expect(jsonData[1].id, 'result[1]: \"id\" field').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Добавление номера телефона клиенту 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, type, description\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.type).to.not.be.null;\r",
									"    pm.expect(target.description).to.not.be.null;\r",
									"    pm.expect(target.type).equal('PHONE', 'Вид контакта должен быть \"PHONE\"');\r",
									"    pm.expect(target.description).equal('+7(920)168-88-25', 'Значение контакта должно быть \"+7(920)168-88-25\"');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"PHONE\",\r\n    \"description\": \"+7(920)168-88-25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление Email-а клиенту 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, type, description\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.type).to.not.be.null;\r",
									"    pm.expect(target.description).to.not.be.null;\r",
									"    pm.expect(target.type).equal('EMAIL', 'Вид контакта должен быть \"EMAIL\"');\r",
									"    pm.expect(target.description).equal('Grigiry@gmail.com', 'Значение контакта должно быть \"Grigiry@gmail.com\"');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"EMAIL\",\r\n    \"description\": \"Grigiry@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление Email-а клиенту 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, type, description\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('type');\r",
									"pm.expect(target).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать соответствующие данные\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.type).to.not.be.null;\r",
									"    pm.expect(target.description).to.not.be.null;\r",
									"    pm.expect(target.type).equal('EMAIL', 'Вид контакта должен быть \"EMAIL\"');\r",
									"    pm.expect(target.description).equal('Igor98@gmail.com', 'Значение контакта должно быть \"Igor98@gmail.com\"');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"EMAIL\",\r\n    \"description\": \"Igor98@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить все контактные данные клиента 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать 2 контакта клиента\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.length, 'contact count in total').to.eql(2);\r",
									"\r",
									"    pm.expect(jsonData[0].type, 'result[0]: \"type\" field').to.eql('PHONE');\r",
									"    pm.expect(jsonData[0].description, 'result[0]: \"description\" field').to.eql('+7(920)168-88-25');\r",
									"     pm.expect(jsonData[1].type, 'result[0]: \"type\" field').to.eql('EMAIL');\r",
									"    pm.expect(jsonData[1].description, 'result[0]: \"description\" field').to.eql('Grigiry@gmail.com');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить все EMAIL клиента 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать 1 контакт клиента\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.length, 'conract count in total').to.eql(1);\r",
									"\r",
									"    pm.expect(jsonData[0].type, 'result[0]: \"type\" field').to.eql('EMAIL');\r",
									"    pm.expect(jsonData[0].description, 'result[0]: \"description\" field').to.eql('Grigiry@gmail.com');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts?type=EMAIL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"query": [
								{
									"key": "type",
									"value": "EMAIL"
								}
							],
							"variable": [
								{
									"key": "clientId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить контакты несуществующего клиента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients/:clientId/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients",
								":clientId",
								"contacts"
							],
							"variable": [
								{
									"key": "clientId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}